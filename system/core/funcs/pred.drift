pnot2 = dot pnot pnot
pnot3 = dot pnot pnot2

proof2pred (Proof a) = pred a

substPidentStrict = substPidentStrict_idents natSet.empty
substPidentStrict_idents idents pident expr pident = assert
  (natSet.fold (substPidentStrict_fold expr) true idents)
  expr
substPidentStrict_idents idents pident expr p:(Pident *) = p
substPidentStrict_idents idents pident expr (Impl a b) = impl
  (substPidentStrict_idents idents pident expr a)
  (substPidentStrict_idents idents pident expr b)
substPidentStrict_idents idents pident expr (Pnot a) = pnot
  (substPidentStrict_idents idents pident expr a)
substPidentStrict_idents idents pident expr (Forall a b) = forall a
  (substPidentStrict_idents (natSet.insert a idents) pident expr b)
substPidentStrict_idents idents pident expr p:(Pelem * *) = p
substPidentStrict_fold expr ok ident = and ok (not (hasIdent ident expr))

substIdentStrict = substIdentStrict_idents natSet.empty
substIdentStrict_idents idents ident1 ident2 p:(Pident *) = p
substIdentStrict_idents idents ident1 ident2 (Impl a b) = impl
  (substIdentStrict_idents idents ident1 ident2 a)
  (substIdentStrict_idents idents ident1 ident2 b)
substIdentStrict_idents idents ident1 ident2 (Pnot a) = pnot
  (substIdentStrict_idents idents ident1 ident2 a)
substIdentStrict_idents idents ident1 ident2 p:(Forall ident1 *) = p
substIdentStrict_idents idents ident1 ident2 (Forall a b) = forall a
  (substIdentStrict_idents (natSet.insert a idents) ident1 ident2 b)
substIdentStrict_idents idents ident1 ident2 (Pelem a b) =
  assert (not (natSet.has ident2 idents))
    (pelem (replaceIdent ident1 ident2 a) (replaceIdent ident1 ident2 b))

substPident pident p pident = p
substPident pident p a:(Pident *) = a
substPident pident p (Impl a b) = impl (substPident pident p a) (substPident pident p b)
substPident pident p (Pnot a) = pnot (substPident pident p a)
substPident pident p (Forall a b) = forall a (substPident pident p b)
substPident pident p a:(Pelem * *) = a

substIdent ident1 ident2 (Impl a b) = impl (substIdent ident1 ident2 a) (substIdent ident1 ident2 b)
substIdent ident1 ident2 (Pnot a) = pnot (substIdent ident1 ident2 a)
substIdent ident1 ident2 p:(Forall ident1 b) = p
substIdent ident1 ident2 (Forall a b) = forall a (substIdent ident1 ident2 b)
substIdent ident1 ident2 (Pelem a b) = pelem (replaceIdent ident1 ident2 a) (replaceIdent ident1 ident2 b)

getFreeIdents p = getFreeIdents_ p natSet.empty
getFreeIdents_ (Pident *) set = set
getFreeIdents_ (Impl a b) set = getFreeIdents_ b (getFreeIdents_ a set)
getFreeIdents_ (Pnot a) set = getFreeIdents_ a set
getFreeIdents_ (Forall ident a) set = natSet.remove ident (getFreeIdents_ a set)
getFreeIdents_ (Pelem a b) set = natSet.insert b (natSet.insert a set)

hasFreeIdents = dot nempty getFreeIdents
noFreeIdents = dot empty getFreeIdents

getPidents p = getPidents_ p natSet.empty
getPidents_ (Pident a) set = natSet.insert a set
getPidents_ (Impl a b) set = getPidents_ b (getPidents_ a set)
getPidents_ (Pnot a) set = getPidents_ a set
getPidents_ (Forall ident a) set = getPidents_ a set
getPidents_ (Pelem a b) set = set

hasPidents = dot nempty getPidents
noPidents = dot empty getPidents

replaceIdent ident1 ident2 ident1 = ident2
replaceIdent ident1 ident2 a = a

hasPident pident Nil = false
hasPident pident (Pair a b) = or (hasPident pident a) (hasPident pident b)
hasPident pident a = hasPident_ pident a
hasPident_ pident pident = true
hasPident_ pident (Pident *) = false
hasPident_ pident (Impl a b) = or (hasPident_ pident a) (hasPident_ pident b)
hasPident_ pident (Pnot a) = hasPident_ pident a
hasPident_ pident (Forall * a) = hasPident_ pident a
hasPident_ pident (Pelem a b) = false

hasIdent ident Nil = false
hasIdent ident (Pair a b) = or (hasIdent ident a) (hasIdent ident b)
hasIdent ident a = hasIdent_ ident a
hasIdent_ ident (Impl a b) = or (hasIdent_ ident a) (hasIdent_ ident b)
hasIdent_ ident (Pnot a) = hasIdent_ ident a
hasIdent_ ident (Forall ident *) = false
hasIdent_ ident (Forall * a) = hasIdent_ ident a
hasIdent_ ident (Pelem a b) = or (eq ident a) (eq ident b)
hasIdent_ ident ident = true
hasIdent_ ident Zero = false
hasIdent_ ident (Succ *) = false

hasFreeIdent ident Nil = false
hasFreeIdent ident (Pair a b) = or (hasFreeIdent ident a) (hasFreeIdent ident b)
hasFreeIdent ident a = hasFreeIdent_ a
hasFreeIdent_ ident (Impl a b) = or (hasFreeIdent_ ident a) (hasFreeIdent_ ident b)
hasFreeIdent_ ident (Pnot a) = hasFreeIdent_ ident a
hasFreeIdent_ ident (Forall ident *) = false
hasFreeIdent_ ident (Forall * a) = hasFreeIdent_ ident a
hasFreeIdent_ ident (Pelem a b) = or (eq a ident) (eq b ident)

availPident expr = availPident_1 phi expr
availPident_1 pident expr = ite (hasPident pident expr)
  availPident_2 availPident_3 pident expr
availPident_2 pident expr = availPident_1 (nextPident pident) expr
availPident_3 pident expr = pident

availPidents expr Zero = nil
availPidents expr (Succ num) = pair
  (availPident expr)
  (availPidents (pair (availPident expr) expr) num)

availIdent expr = availIdent_1 a. expr
availIdent_1 ident expr = ite (hasIdent ident expr)
  availIdent_2 availIdent_3 ident expr
availIdent_2 ident expr = availIdent_1 (nextIdent ident) expr
availIdent_3 ident expr = ident

autoPidentPredPairs predUni predInst = pidentMap2pairs
  (makePidentMap predUni predInst nil)

pidentMap2pairs pidentMap = pidentMap2pairs_1 pidentMap phi
pidentMap2pairs_1 Nil pident = nil
pidentMap2pairs_1 (Pair Nil rest) pident = pidentMap2pairs_1 rest (nextPident pident)
pidentMap2pairs_1 (Pair pred rest) pident = pair
  (pair pident pred)
  (pidentMap2pairs_1 rest (nextPident pident))

makePidentMap (Pident num) pred pidentMap = addToPidentMap num pred pidentMap
makePidentMap (Impl a b) (Impl c d) pidentMap = makePidentMap b d (makePidentMap a c pidentMap)
makePidentMap (Pnot a) (Pnot b) pidentMap = makePidentMap a b pidentMap
makePidentMap (Forall a b) (Forall a c) pidentMap = makePidentMap b c pidentMap
makePidentMap (Pelem a b) (Pelem a b) pidentMap = pidentMap

addToPidentMap Zero pred Nil = pair pred nil
addToPidentMap Zero pred (Pair Nil rest) = pair pred rest
addToPidentMap Zero pred (Pair pred rest) = pair pred rest
addToPidentMap (Succ num) pred Nil = pair nil (addToPidentMap num pred nil)
addToPidentMap (Succ num) pred (Pair a b) = pair a (addToPidentMap num pred b)