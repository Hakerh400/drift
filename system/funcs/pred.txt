pnot2 = dot pnot pnot
pnot3 = dot pnot pnot2

proof2pred (Proof a) = pred a

replaceIdent ident1 ident2 ident1 = ident2
replaceIdent ident1 ident2 * = ident1

hasPident pident:(Pident *) Nil = false
hasPident pident:(Pident *) (Pair a b) = or (hasPident pident a) (hasPident pident b)
hasPident pident:(Pident *) a = hasPident_ pident a
hasPident_ pident:(Pident *) pident = true
hasPident_ pident:(Pident *) (Pident *) = false
hasPident_ pident:(Pident *) (Impl a b) = or (hasPident_ pident a) (hasPident_ pident b)
hasPident_ pident:(Pident *) (Pnot a) = hasPident_ pident a
hasPident_ pident:(Pident *) (Forall * a) = hasPident_ pident a
hasPident_ pident:(Pident *) (Pelem a b) = false

hasFreeIdent ident Nil = false
hasFreeIdent ident (Pair a b) = or (hasFreeIdent ident a) (hasFreeIdent ident b)
hasFreeIdent ident a = hasFreeIdent_ a
hasFreeIdent_ ident (Impl a b) = or (hasFreeIdent_ ident a) (hasFreeIdent_ ident b)
hasFreeIdent_ ident (Pnot a) = hasFreeIdent_ ident a
hasFreeIdent_ ident (Forall ident *) = false
hasFreeIdent_ ident (Forall * a) = hasFreeIdent_ ident a
hasFreeIdent_ ident (Pelem a b) = or (eq a ident) (eq b ident)

availPident expr = availPident_1 phi expr
availPident_1 pident expr = ite (hasPident pident expr)
  availPident_2 availPident_3 pident expr
availPident_2 pident expr = availPident_1 (nextPident pident) expr
availPident_3 pident expr = pident

availPidents expr Zero = nil
availPidents expr (Succ num) = pair
  (availPident expr)
  (availPidents (pair (availPident expr) expr) num)

autoPidentPredPairs predUni predInst = pidentMap2pairs
  (makePidentMap predUni predInst nil)

pidentMap2pairs pidentMap = pidentMap2pairs_1 pidentMap phi
pidentMap2pairs_1 Nil pident = nil
pidentMap2pairs_1 (Pair Nil rest) pident = pidentMap2pairs_1 rest (nextPident pident)
pidentMap2pairs_1 (Pair pred rest) pident = pair
  (pair pident pred)
  (pidentMap2pairs_1 rest (nextPident pident))

makePidentMap (Pident num) pred pidentMap = addToPidentMap num pred pidentMap
makePidentMap (Impl a b) (Impl c d) pidentMap = makePidentMap b d (makePidentMap a c pidentMap)
makePidentMap (Pnot a) (Pnot b) pidentMap = makePidentMap a b pidentMap
makePidentMap (Forall a b) (Forall a c) pidentMap = makePidentMap b c pidentMap
makePidentMap (Pelem a b) (Pelem a b) pidentMap = pidentMap

addToPidentMap Zero pred Nil = pair pred nil
addToPidentMap Zero pred (Pair Nil rest) = pair pred rest
addToPidentMap Zero pred (Pair pred rest) = pair pred rest
addToPidentMap (Succ num) pred Nil = pair nil (addToPidentMap num pred nil)
addToPidentMap (Succ num) pred (Pair a b) = pair a (addToPidentMap num pred b)