-- Prove a tautology. Below is the algorithm in pseudocode.
--
-- prove `prop`:
--   pidents = get all pidents from `prop`
--   (sups, stat) = split at boundary `prop`
--   isNorm = if the size of `sups` is equal to the size of `pidents`
-- 
--   if not `isNorm`:
--     missingPident = find pident that is missing
--     x = prove (missingPident -> prop)
--     y = prove (~missingPident -> prop)
--     apply MP 2 times:
--       p = MP (a -> b) -> (~a -> b) -> b, x
--       r = MP p, y
--     return r
-- 
--   if `stat` is in `sups`:
--     apply `impl.refl`: stat -> stat
--     apply `util.mid` iteratively for all pidents from `sups` that are after `stat`
--     apply `util.addSup` iteratively for all pidents from `sups` that are before `stat`
-- 
--   if `stat` is an implication (ant -> con):
--     if `con` is true:
--       prove `prop` in which `stat` is replaced with `con`
--       add `ant` before `con` in the proof
-- 
--     if `ant` is false:
--       prove `prop` in which `stat` is replaced with `~ant`
--       apply ~a -> a -> b
-- 
--   if `stat` is a negation (~expr):
--     if `expr` is an implication (x -> y)
--       prove `prop` in which `stat` is replaced with `x`
--       prove `prop` in which `stat` is replaced with `~y`
--       apply a -> ~b -> ~(a -> b)
-- 
--     if `expr` is a negation (~x):
--       prove `prop` in which `stat` is replaced with `x`
--       apply double negation introduction

prove.taut prop = prove.taut_1
  prop
  (prove.taut_splitAtBoundary prop)
  (eq
    (length (fst (prove.taut_splitAtBoundary prop)))
    (length (getPidents prop)))

prove.taut_1 prop (Pair sups stat) isNorm = ite isNorm
  prove.taut_norm prove.taut_notNorm prop sups stat

prove.taut_notNorm prop sups stat = prove.taut_notNorm_1
  prop
  sups
  stat
  (prove.taut_findMissingPident sups stat)

prove.taut_notNorm_1 prop sups stat missingPident = util.mp
  (util.mp
    (util.addSups
      (util.inst todo (rawList (psi missingPident) (psi prop) nil))
      sups)
    (prove.taut (impl missingPident prop)))
  (prove.taut (impl (pnot missingPident) prop))

prove.taut_norm sups stat = todo

prove.taut_splitAtBoundary prop = todo

prove.taut_findMissingPident sups stat = todo

todo = todo_ false
todo_ True = id