-- a -> b -> a
th.prop.ax1.a.b = ax.prop.1

-- (a -> b -> c) -> (a -> b) -> a -> c
th.prop.ax2.a.b.c = ax.prop.2

-- (~a -> ~b) -> b -> a
th.prop.ax3.a.b = ax.prop.3

-- a -> (b -> a) -> a
th.prop.ax1.a.ba = util.ax1 phi (impl psi phi)

-- (a -> (b -> a) -> a) -> (a -> b -> a) -> a -> a
th.prop.ax2.a.ba.a = util.ax2 phi (impl psi phi) phi

-- (a -> b -> a) -> a -> a
th.prop.impl.ax1ab.refl = rule.mp th.prop.ax2.a.ba.a th.prop.ax1.a.ba

-- a -> a
th.prop.impl.refl = rule.mp th.prop.impl.ax1ab.refl th.prop.ax1.a.b

-- (a -> b -> c -> d) -> a -> (b -> c) -> b -> d
th.prop.mpt = rule.mp
  (util.ax2 phi (impl psi (impl chi theta)) (impl (impl psi chi) (impl psi theta)))
  (util.addSup (util.ax2 psi chi theta) phi)

-- (a -> b) -> (b -> c) -> a -> a
th.prop.ab.bc.aa = util.addSup2
  th.prop.impl.refl
  (impl phi psi)
  (impl psi chi)

-- (a -> b) -> a -> b
th.prop.ab.ab = util.impl.refl (impl phi psi)

-- (a -> b) -> a -> b -> c -> b
th.prop.ab.ab.cb = util.addSup2
  (util.ax1 psi chi)
  (impl phi psi)
  phi

-- (a -> b) -> (a -> b) -> a -> c -> b
th.prop.ab.ab.acb = util.infer.mpt th.prop.ab.ab.cb

-- (a -> b) -> a -> c -> b
th.prop.mid = rule.mp
  (util.infer.ax2 th.prop.ab.ab.acb)
  th.prop.ab.ab

-- (a -> b) -> (b -> c) -> a -> a -> b
th.prop.ab.bc.aab = util.mid2
  th.prop.ab.ab
  (impl psi chi)
  phi

-- (a -> b) -> (b -> c) -> a -> b
th.prop.ab.bc.ab = util.mid th.prop.ab.ab (impl psi chi)

-- (a -> b) -> (b -> c) -> a -> b -> c
th.prop.ab.bc.abc = util.addSup
  (util.ax1 (impl psi chi) phi)
  (impl phi psi)

-- (a -> b) -> (b -> c) -> a -> c
th.prop.bc.ab.ac = rule.mp
  (util.infer.ax2 (util.addSup
    th.prop.ax2.a.b.c
    (impl psi chi)))
  (util.ax1 (impl psi chi) phi)

-- (a -> b) -> (c -> a) -> c -> b
th.prop.ant.intr = util.infer.mpt
  (util.ax1 (impl phi psi) chi)

-- (a -> b -> c) -> b -> (a -> b) -> a -> c
th.prop.abc.b.ab.ac = util.mid
  (util.ax2 phi psi chi)
  psi

-- (a -> b -> c) -> (b -> a -> b) -> b -> a -> c
th.prop.abc.bab.bac = util.infer.mpt
  th.prop.abc.b.ab.ac

-- (a -> b -> c) -> b -> a -> c
th.prop.reord = util.mp.legacy
  th.prop.abc.bab.bac
  (util.addSup (util.ax1 psi phi) (impl phi (impl psi chi)))

-- a -> (a -> b) -> b
th.prop.a.ab.b = util.reord th.prop.ab.ab

-- ((a -> a) -> b) -> b
th.prop.aa.b.b = rule.mp
  (rule.inst th.prop.a.ab.b phi (impl phi phi))
  th.prop.impl.refl

-- (a -> b) -> (b -> c) -> a -> c
th.prop.impl.tran = util.reord th.prop.bc.ab.ac

-- ((a -> b) -> a -> c) -> a -> b -> c
th.prop.ax2.conv = util.impl.tran
  (rule.mp
    (util.reord
      (util.infer.mpt
        (util.ax1
          (impl (impl phi psi) (impl phi chi))
          psi)))
    (util.ax1 psi phi))
  (util.inst th.prop.reord (rawList (pair phi psi) (pair psi phi) nil))

th.prop.ax1 = th.prop.ax1.a.b
th.prop.ax2 = th.prop.ax2.a.b.c
th.prop.ax3 = th.prop.ax3.a.b

-- (a -> b -> c) -> (d -> a) -> (d -> b) -> (d -> c)
th.prop.ant.intr.ext = util.tran
  (util.ax1 (impl phi (impl psi chi)) theta)
  (util.tran
    (util.ax2 theta phi (impl psi chi))
    (util.ant.intr
      (util.ax2 theta psi chi)
      (impl theta phi)))

-- (~~a -> ~~b) -> a -> b
th.prop.dneg2.elim = util.tran
  (util.ax3 (pnot phi) (pnot psi))
  (util.ax3 psi phi)

-- ~~a -> a
th.prop.dneg.elim = rule.mp
  (util.reord
    (util.tran
      (util.ax1 (pnot2 phi) (pnot2 (extract th.prop.impl.refl)))
      (util.inst th.prop.dneg2.elim (rawList
        (pair phi (extract th.prop.impl.refl))
        (pair psi phi)
        nil))))
  th.prop.impl.refl

-- a -> ~~a
th.prop.dneg.intr = rule.mp
  (util.ax3 (pnot2 phi) phi)
  (rule.inst th.prop.dneg.elim phi (pnot phi))

-- (a -> b) -> ~~a -> b
th.prop.dneg.intr1 = rule.mp
  (util.inst th.prop.impl.tran (rawList
    (pair phi (pnot2 phi))
    (pair psi phi)
    (pair chi psi)
    nil))
  th.prop.dneg.elim

-- (a -> b) -> a -> ~~b
th.prop.dneg.intr2 = util.ant.intr
  (rule.inst th.prop.dneg.intr phi psi)
  phi

-- (a -> b) -> ~~a -> ~~b
th.prop.dneg2.intr = util.tran
  th.prop.dneg.intr1
  (rule.inst th.prop.dneg.intr2 phi (pnot2 phi))

-- (a -> b) -> ~b -> ~a
th.prop.ax3.conv = util.tran
  th.prop.dneg2.intr
  (util.ax3 (pnot phi) (pnot psi))

-- a -> ~b -> ~(a -> b)
th.prop.a.-b.-ab = util.tran
  th.prop.a.ab.b
  (rule.inst th.prop.ax3.conv phi (impl phi psi))

-- (a -> b) -> (~a -> b) -> b
-- 
-- 1. SUP           a -> b
-- 2. SUP           ~a -> b
-- 3. CONV 2        ~b -> a
-- 4. TRAN 3 1      ~b -> b
-- 5. TR (below) 4  b
-- 
-- 
-- (~a -> a) -> a
-- 
-- 1. TH                  (~a -> ~~a) -> ~~a
-- 2. TH (~~a -> a)       ~~a -> a
-- 3. TRAN 1 2            (~a -> ~~a) -> a
-- 4. CONV 3              ~a -> ~(~a -> ~~a)
-- 5. TH (a -> ~~a)       a -> ~~a
-- 6. ANT 5               (~a -> a) -> (~a -> ~~a)
-- 6. CONV 6              ~(~a -> ~~a) -> ~(~a -> a)
-- 7. TRAN 4 6            ~a -> ~(~a -> a)
-- 8. AX3 7               (~a -> a) -> a
-- 
-- 
-- (a -> ~a) -> ~a
-- 
-- 1. th.prop.a.-b.-ab    a -> ~~a -> ~(a -> ~a)
-- 2. TH (~~a -> a)       ~~a -> a
-- 3. TRAN 2 1            ~~a -> ~~a -> ~(a -> ~a)
-- 4. TH                  ~~a -> ~(a -> ~a)
-- 5. CONV 4              (a -> ~a) -> ~a
-- 
-- 
-- (a -> a -> b) -> a -> b
-- 
-- 1. SUP                 a -> a -> b
-- 2. ANT.EXT 1           (a -> a) -> (a -> a) -> a -> b
-- 3. MP 2 (a -> a)       (a -> a) -> a -> b
-- 4. MP 3 (a -> a)       a -> b

----------------------------------------------------------------------------------------------------

test = util.mp
  (util.addSup2 (util.addSup (util.ax1 chi theta) chi) phi psi)
  (util.addSup2 (util.impl.refl chi) phi psi)