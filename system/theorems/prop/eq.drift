-- Ɐa Ɐb (a = b <-> Ɐc (c ∈ a <-> c ∈ b) ^ Ɐc (a ∈ c <-> b ∈ c))
th.eq.def = util.uni.intr
  (util.uni.intr
    (util.iff.refl (synt.eq a. b.))
    b.)
  a.

-- Ɐa (a = a)
th.eq.refl = util.uni.intr
  (util.and
    (util.uni.intr
      (util.iff.refl (pelem b. a.))
      b.)
    (util.uni.intr
      (util.iff.refl (pelem a. b.))
      b.))
  a.

-- T <-> Ɐa (a = a)
th.true.def = prove.taut
  (synt.iff synt.true (forall a. (synt.eq a. a.)))

-- ⊥ <-> ~T
th.false.def = prove.taut
  (synt.iff synt.false (pnot synt.true))

-- T
th.true = prove.taut synt.true

-- ⊥
th.nfalse = prove.taut (pnot synt.false)